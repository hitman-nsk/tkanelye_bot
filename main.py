import os
import openai
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message
import asyncio

openai.api_key = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

bot = Bot(token=TELEGRAM_BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è GPT-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
PROMPTS = {
    "content_creator": "–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç –∏ –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –ü—Ä–∏–¥—É–º–∞–π –∏–¥–µ—é, –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç–µ–º—É, –∫–æ—Ç–æ—Ä—É—é –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.",
    "marketer": "–¢—ã –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥. –í–æ–∑—å–º–∏ —Ç–µ–∫—Å—Ç –∏ —É—Å–∏–ª–∏ –µ–≥–æ: –¥–æ–±–∞–≤—å –£–¢–ü, —Ç—Ä–∏–≥–≥–µ—Ä—ã, –æ—Ñ—Ñ–µ—Ä –∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π –Ω–∞ –ø—Ä–æ–¥–∞–∂—É. –ù–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–π –≤—Å—ë, –∞ —É—Å–∏–ª–∏ —Å–º—ã—Å–ª.",
    "smm": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Telegram –∏ Instagram. –ê–¥–∞–ø—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç Telegram, –¥–æ–±–∞–≤—å —Ö—ç—à—Ç–µ–≥–∏, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –≤–∏–∑—É–∞–ª—É. –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∂–∏–≤—ã–º –∏ –≤–æ–≤–ª–µ–∫–∞—é—â–∏–º."
}

async def query_gpt(role_prompt, user_input):
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": role_prompt},
            {"role": "user", "content": user_input}
        ]
    )
    return response['choices'][0]['message']['content']

@dp.message(F.text)
async def handle_message(message: Message):
    user_input = message.text
    await message.answer("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É GPT-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")

    try:
        # –®–∞–≥ 1: Content Creator
        content_output = await query_gpt(PROMPTS["content_creator"], user_input)

        # –®–∞–≥ 2: –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥
        marketing_output = await query_gpt(PROMPTS["marketer"], content_output)

        # –®–∞–≥ 3: SMM
        final_output = await query_gpt(PROMPTS["smm"], marketing_output)

        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n" + final_output)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())