import os
import openai
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
openai.api_key = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DISCORD_WEBHOOK_URL = "https://discord.com/api/webhooks/1362399160350806167/MNFmKQ2MM3BVi84DS5MlBqTmPsORCPG6bgKXPvwMo7uFgBmghpZEBdb2QMikDtgDG5HJ"

bot = Bot(token=TELEGRAM_BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# GPT-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
PROMPTS = {
    "content_creator": "–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç. –ü—Ä–∏–¥—É–º–∞–π –∏–¥–µ—é, –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç–µ–º—É, –∫–æ—Ç–æ—Ä—É—é –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.",
    "marketer": "–¢—ã –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥. –£—Å–∏–ª—å —Ç–µ–∫—Å—Ç: –¥–æ–±–∞–≤—å –£–¢–ü, —Ç—Ä–∏–≥–≥–µ—Ä—ã, –æ—Ñ—Ñ–µ—Ä –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.",
    "smm": "–¢—ã SMM-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –ü—Ä–µ–æ–±—Ä–∞–∑—É–π —Ç–µ–∫—Å—Ç –ø–æ–¥ Telegram: –¥–æ–±–∞–≤—å —Ö—ç—à—Ç–µ–≥–∏, –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã, –∏ –æ–ø–∏—à–∏ –≤–∏–∑—É–∞–ª –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏."
}

# –ó–∞–ø—Ä–æ—Å –∫ GPT
async def query_gpt(role_prompt, user_input):
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": role_prompt},
            {"role": "user", "content": user_input}
        ]
    )
    return response['choices'][0]['message']['content']

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ Discord (Midjourney)
def send_prompt_to_midjourney(prompt: str):
    content = f"/imagine {prompt}"
    response = requests.post(DISCORD_WEBHOOK_URL, json={"content": content})
    if response.status_code == 204:
        return "üé® –ü—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Midjourney!"
    else:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Discord: {response.status_code}"

@dp.message(F.text)
async def handle_message(message: Message):
    user_input = message.text
    await message.answer("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É GPT-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...")

    try:
        content_output = await query_gpt(PROMPTS["content_creator"], user_input)
        marketing_output = await query_gpt(PROMPTS["marketer"], content_output)
        smm_output = await query_gpt(PROMPTS["smm"], marketing_output)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ Midjourney (–±–µ—Ä—ë–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ SMM)
        mj_feedback = send_prompt_to_midjourney(smm_output)

        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ!")

" + smm_output + "

" + mj_feedback)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
