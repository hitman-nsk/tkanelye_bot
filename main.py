# -*- coding: utf-8 -*-
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
import logging

TOKEN = "7834299472:AAEUy5elgxbEvtmcbRqEi9U0j6MFRgCyiPo"
GROUP_ID = -1001260252066  # ‚Üê –≤–∞—à chat_id –≥—Ä—É–ø–ø—ã

bot = Bot(token=TOKEN)
dp = Dispatcher()

class LeadForm(StatesGroup):
    room = State()
    goal = State()
    style = State()
    feeling = State()

@dp.message(F.text)
async def start(message: Message, state: FSMContext):
    kb = InlineKeyboardBuilder()
    kb.button(text="–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä", callback_data="start")
    await message.answer(
        "ü§ç –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –§–∞–±—Ä–∏–∫–µ –¢–∫–∞–Ω–µ–ª—å–µ! –•–æ—Ç–∏—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–µ —à—Ç–æ—Ä—ã?",
        reply_markup=kb.as_markup()
    )

@dp.callback_query(F.data == "start")
async def ask_room(callback: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardBuilder()
    for option in ["–ì–æ—Å—Ç–∏–Ω–∞—è", "–°–ø–∞–ª—å–Ω—è", "–î–µ—Ç—Å–∫–∞—è", "–ö—É—Ö–Ω—è"]:
        kb.button(text=option, callback_data=f"room_{option}")
    await callback.message.answer("üïäÔ∏è –ì–¥–µ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à—Ç–æ—Ä—ã?", reply_markup=kb.as_markup())
    await state.set_state(LeadForm.room)

@dp.callback_query(F.data.startswith("room_"))
async def ask_goal(callback: CallbackQuery, state: FSMContext):
    await state.update_data(room=callback.data.split("_")[1])
    kb = InlineKeyboardBuilder()
    for option in ["–≠—Å—Ç–µ—Ç–∏–∫–∞", "–ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ", "–£—é—Ç", "–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å"]:
        kb.button(text=option, callback_data=f"goal_{option}")
    await callback.message.answer("üåø –ß—Ç–æ –¥–ª—è –≤–∞—Å –≥–ª–∞–≤–Ω–æ–µ –≤ —à—Ç–æ—Ä–∞—Ö?", reply_markup=kb.as_markup())
    await state.set_state(LeadForm.goal)

@dp.callback_query(F.data.startswith("goal_"))
async def ask_style(callback: CallbackQuery, state: FSMContext):
    await state.update_data(goal=callback.data.split("_")[1])
    kb = InlineKeyboardBuilder()
    for option in ["–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π", "–ö–ª–∞—Å—Å–∏–∫–∞", "–õ–æ—Ñ—Ç", "–°–∫–∞–Ω–¥–∏"]:
        kb.button(text=option, callback_data=f"style_{option}")
    await callback.message.answer("üè° –í –∫–∞–∫–æ–º —Å—Ç–∏–ª–µ —É –≤–∞—Å –∏–Ω—Ç–µ—Ä—å–µ—Ä?", reply_markup=kb.as_markup())
    await state.set_state(LeadForm.style)

@dp.callback_query(F.data.startswith("style_"))
async def ask_feeling(callback: CallbackQuery, state: FSMContext):
    await state.update_data(style=callback.data.split("_")[1])
    kb = InlineKeyboardBuilder()
    for option in ["–ü–æ–∫–æ–π", "–°–≤–µ–∂–µ—Å—Ç—å", "–¢–µ–ø–ª–æ", "–õ—ë–≥–∫–æ—Å—Ç—å"]:
        kb.button(text=option, callback_data=f"feel_{option}")
    await callback.message.answer("üí´ –ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ —Ö–æ—Ç–∏—Ç–µ –æ—â—É—â–∞—Ç—å –≤ –∫–æ–º–Ω–∞—Ç–µ?", reply_markup=kb.as_markup())
    await state.set_state(LeadForm.feeling)

@dp.callback_query(F.data.startswith("feel_"))
async def submit(callback: CallbackQuery, state: FSMContext):
    await state.update_data(feeling=callback.data.split("_")[1])
    data = await state.get_data()
    text = (
        f"üéØ –ù–æ–≤—ã–π –ª–∏–¥ –æ—Ç @{callback.from_user.username or '–±–µ–∑ username'}:\n\n"
        f"üè† –ü–æ–º–µ—â–µ–Ω–∏–µ: {data['room']}\n"
        f"üéØ –¶–µ–ª—å: {data['goal']}\n"
        f"üé® –°—Ç–∏–ª—å: {data['style']}\n"
        f"üí≠ –≠–º–æ—Ü–∏–∏: {data['feeling']}"
    )
    await bot.send_message(chat_id=GROUP_ID, text=text)
    await callback.message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ù–∞—à –¥–∏–∑–∞–π–Ω–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    await state.clear()

# –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@dp.message(F.text.lower().in_({"–ø—Ä–∏–≤–µ—Ç", "–∞—É", "—Ç—ã –º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏?", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ"}))
async def greeting_handler(message: Message):
    await message.answer("üëã –î–∞, —è –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç –§–∞–±—Ä–∏–∫–∏ –¢–∫–∞–Ω–µ–ª—å–µ.\n–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø–æ–¥–±–æ—Ä–æ–º —à—Ç–æ—Ä!")

# –û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É
@dp.message()
async def fallback_handler(message: Message):
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É, –∞ –ø–æ–∫–∞ –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø–æ–¥–±–æ—Ä–æ–º —à—Ç–æ—Ä üòä")
    text = (
        f"üì© –ù–æ–≤—ã–π –ª–∏–¥ –æ—Ç @{message.from_user.username or '–±–µ–∑ username'}\n\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
    )
    try:
        await bot.send_message(chat_id=GROUP_ID, text=text)
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É:\n<code>{e}</code>", parse_mode="HTML")

# –ó–∞–ø—É—Å–∫
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
